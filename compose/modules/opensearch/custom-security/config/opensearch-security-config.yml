---

# This is the main OpenSearch Security configuration file where authentication
# and authorization is defined.
#
# You need to configure at least one authentication domain in the authc of this file.
# An authentication domain is responsible for extracting the user credentials from
# the request and for validating them against an authentication backend like Active Directory for example.
#
# If more than one authentication domain is configured the first one which succeeds wins.
# If all authentication domains fail then the request is unauthenticated.
# In this case an exception is thrown and/or the HTTP status is set to 401.
#
# After authentication authorization (authz) will be applied. There can be zero or more authorizers which collect
# the roles from a given backend for the authenticated user.
#
# Both, authc and auth can be enabled/disabled separately for REST and TRANSPORT layer. Default is true for both.
#        http_enabled: true
#        transport_enabled: true
#
# For HTTP it is possible to allow anonymous authentication. If that is the case then the HTTP authenticators try to
# find user credentials in the HTTP request. If credentials are found then the user gets regularly authenticated.
# If none can be found the user will be authenticated as an "anonymous" user. This user has always the username "anonymous"
# and one role named "anonymous_backendrole".
# If you enable anonymous authentication all HTTP authenticators will not challenge.
#
#
# Note: If you define more than one HTTP authenticators make sure to put non-challenging authenticators like "proxy" or "clientcert"
# first and the challenging one last.
# Because it's not possible to challenge a client with two different authentication methods (for example
# Kerberos and Basic) only one can have the challenge flag set to true. You can cope with this situation
# by using pre-authentication, e.g. sending a HTTP Basic authentication header in the request.
#
# Default value of the challenge flag is true.
#
#
# HTTP
#   basic (challenging)
#   proxy (not challenging, needs xff)
#   kerberos (challenging)
#   clientcert (not challenging, needs https)
#   jwt (not challenging)
#   host (not challenging) #DEPRECATED, will be removed in a future version.
#                          host based authentication is configurable in roles_mapping

# Authc
#   internal
#   noop
#   ldap

# Authz
#   ldap
#   noop


_meta:
  type: "config"
  config_version: 2

config:
  dynamic:
    http:
      anonymous_auth_enabled: false
    authc:
      internal_auth:
        order: 0
        description: "HTTP basic authentication using the internal user database"
        http_enabled: true
        transport_enabled: true
        http_authenticator:
          type: basic
          challenge: false
        authentication_backend:
          type: internal
      saml_auth:
        # https://aws.amazon.com/blogs/architecture/building-saml-federation-for-amazon-opensearch-dashboards-with-okta/
        # Okta - Settings
        #-------------------------------------------------------------------------
        # Single Sign On URL: https://<kibana_url>/_opendistro/_security/saml/acs
        # Recipient URL: https://<kibana_url>/_opendistro/_security/saml/acs
        # Destination URL: https://<kibana_url>/_opendistro/_security/saml/acs
        # Audience Restriction: https://<kibana_url>
        # Name ID Format: EmailAddress
        #--------------------------------
        # ATTRIBUTE STATEMENTS
        #--------------------------------
        # Name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
        # Name Format: URI Reference
        # Value: user.email
        #--------------------------------
        # GROUP ATTRIBUTE STATEMENTS
        #--------------------------------
        # Name: http://schemas.xmlsoap.org/claims/Group
        # Name Format: URI Reference
        # Filter: Matches regex: .*
        order: 1
        description: "SAML provider"
        http_enabled: true
        transport_enabled: false
        http_authenticator:
          type: saml
          challenge: true
          config:
            idp:
              metadata_file: /usr/share/opensearch/config/opensearch-security/okta-metadata.xml
              entity_id: http://www.okta.com/exk6hmz5431rsicVm5d7
            sp:
              entity_id: https://unlockprogramming-docker-services-x965x9gqvrjfv6r7-5601.githubpreview.dev
              forceAuthn: true
            kibana_url: https://unlockprogramming-docker-services-x965x9gqvrjfv6r7-5601.githubpreview.dev
            subject_key: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
            roles_key: http://schemas.xmlsoap.org/claims/Group
            # The key to sign the token. The algorithm is HMAC256, so it should have at least 32 characters.
            # <https://www.devglan.com/online-tools/hmac-sha256-online>
            exchange_key: b085afc46b8935be5e9ee82ca606aa40dd46701ecc142b4203cb489ad5badd3d
        authentication_backend:
          type: noop